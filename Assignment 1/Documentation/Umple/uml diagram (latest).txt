//Unable to update umple code due to error at null
//Unable to update umple code due to error at null
//Unable to update umple code due to error at null
//Unable to update umple code due to error at null
interface model.Card {
    String toString();
}


class model.WeaponCard
{
  weapon;
isA model.Card;
}

class model.RoomCard
{
  roomName;
model.Room room;
isA model.Card;
  * -- * model.Scenario;
}

class model.CharacterCard
{
  characterName;
isA model.Card;
    * -- * model.Scenario;
}

class model.Scenario
{
  model.RoomCard roomCard;
  model.WeaponCard weapon;
  model.CharacterCard murderer;
    * -- * model.WeaponCard;
public Boolean isEqual(model.Scenario o){

}
}

class model.Room
{
  model.RoomCard roomCard;
  model.WeaponCard weapon;
  model.CharacterCard character;
}

class model.Game
{
  model.Board board;
  model.Player currentPlayer;
  model.Scenario murderScenario;
  
  model.Player[] players;
  
    * -- * model.Scenario;
public int rollDice(){

}
public void dealCards(){

}
public void suggestion(){

}
public boolean accusation(){

}
}

class model.Player
{
  model.CharacterCard character;
  model.Card[] hand;
  boolean canAccuse;
  boolean canRefute;
  model.Position currentPosition;
public void refutation(model.RoomCard arg0,model.CharacterCard arg1,model.WeaponCard arg2){

}
public Boolean checkInRoom(){ // Check if player is in a room
  if (currentPosition.isRoom) {
    return true;
}
}
}

class model.Board
{
  model.Position[] tiles;
  * -- * model.Scenario;
  * -- * model.Position;
public boolean movePlayer(model.Player arg0,Tile arg1,int arg2){

}
}

class model.Position
{
  model.Room inRoom;
  /* Not quite sure we will need this as the model.Room card should store this information for us, instead of individual tiles.
  model.CharacterCard hasCharacter;
  model.WeaponCard hasWeapon;
  */
  boolean passableTile;
  displayName;
  Boolean isRoom;
  }



namespace -;


class model.WeaponCard
{
  position 20 205 157 95;
}

class model.RoomCard
{
  position 199 207 157 95;
  position.association RoomCard__Scenario 124,112 73,0;
}

class model.CharacterCard
{
  position 376 206 157 78;
    position.association CharacterCard__Scenario 91,104 167,0;
  position.association CharacterCard__Player 177,48 0,43;
}

class model.Scenario
{
  position 261 444 221 129;
  position.association Scenario__WeaponCard 25,0 157,95;
}

class model.WeaponCard
{
  position 20 205 157 95;
}

class model.RoomCard
{
  position 199 207 157 95;
}

class model.CharacterCard
{
  position 376 206 157 78;
}

class model.Scenario
{
  position 261 444 221 129;
}

class model.Room
{
  position 29 398 195 112;
  }

class model.Game
{
  position 664 403 199 197;
  position.association Game__Scenario 0,56 222,92;
  position.association Game__Player 199,27 0,137;
  position.association Game__Player 199,10 0,137;
  position.association Game__Player 199,29 0,152;
  position.association Game__Player 199,5 0,125;
  position.association Game__Player 199,33 0,141;
  position.association Game__Player 168,0 221,195;
}

class model.Player
{
  position 663 123 406 163;
}

class model.Board
{
  position 336 644 282 95;
  position.association Board__Scenario 71,0 199,129;
  position.association Board__Position 0,49 220,51;
}

class model.Position
{
  position 31 569 219 163;
  position.association Position__Room 106,0 89,101;
}//$?[End_of_model]$?

namespace -;


class model.WeaponCard
{
  position 20 205 157 95;
}

class model.RoomCard
{
  position 199 207 157 95;
}

class model.CharacterCard
{
  position 376 206 157 78;
}

class model.Scenario
{
  position 261 444 221 129;
}

class model.Room
{
  position 29 398 195 112;
}

class model.Game
{
  position 664 403 199 197;
}